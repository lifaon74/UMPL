

<%
	<%=
		fs.readFileSync('examples/arduino/arduino.js')
	%>
	
	var microcontroller = new ATMEGA328P();
	
	var raw = function(string) {
		return new VString(string);
	};
%>


/*
three ways of writing the same function :

	
	<%= microcontroller.digitalWrite('D5', 'HIGH') %> // giving D5 constant as a string
	<%= microcontroller.digitalWrite(_const.pins.D5, 'HIGH') %> // giving D5 constant from the _const object
	<%= microcontroller.digitalWrite(5, 'HIGH') %> // giving number 5 
*/

<%
	/**
		Why UMPL is useful ? you'll see :
	**/
	
	
	
	
		// we define constants here and not in the C++ code
	var ledPin	= "D13";
%>

	// we need it a the beginning of our program to setup some functions
<%= microcontroller.getCPPFunctions() %>


	// the code inside of this function is strongly optimized
void blink_fast() { // 2.4µs @8Mhz > 1.2µs / write
	<%= microcontroller.digitalWrite(ledPin, 'HIGH') %>
	<%= microcontroller.digitalWrite(ledPin, 'LOW') %>
};


#define LED_PIN 13

	// the code inside of this function is not optimized at the best because we use a C++ constant 
void blink_slow() { // 4.5µs @8Mhz > 2.3µs / write
	<%= microcontroller.digitalWrite(raw('LED_PIN'), raw('HIGH')) %>
	<%= microcontroller.digitalWrite(raw('LED_PIN'), raw('LOW')) %>
};

	// the code inside of this function is the slowest, digitalWrite is provided by the Arduino IDE
void blink_slower() { // 21.6µs @8Mhz  > 10.8µs / write
	digitalWrite(LED_PIN, HIGH);
	digitalWrite(LED_PIN, LOW);
};


/**
	The following code can't be optimized by the c++ compiler, so it will only show the arduino.js optimizations.
**/

void blink_fast_2() { // 94.7µs @8Mhz > 3.6µs / write
	for(uint8_t i = 0; i < 13; i++) {
		for(uint8_t j = 0; j < 2; j++) {
			<%= microcontroller.digitalWrite(raw('i'), raw('j')) %>
		}
	}
};

void blink_slower_2() { // 309.2µs @8Mhz > 11.9µs / write
	for(uint8_t i = 0; i < 13; i++) {
		for(uint8_t j = 0; j < 2; j++) {
			digitalWrite(i, j);
		}
	}
};


/**
	Verdict : if you use arduino.js methods instead of native Arduino IDE function,
	you'll reduce a least the process time by 3.3 and at the best 9 times faster !
	Worth it no ?
**/



uint32_t time_0;
uint32_t time_1;

void setup() {
	Serial.begin(115200);
	
	<%

		var exec_num = 10000;
		['blink_fast', 'blink_slow', 'blink_slower', 'blink_fast_2', 'blink_slower_2'].forEach(function(fnc) {
			%>
			
				time_0 = micros();
				for(uint32_t i = 0; i < <%= exec_num %>; i++) {
					<%= fnc %>();
				}
				
				time_1 = micros();
				Serial.print("<%= fnc %> takes ");
				Serial.print(((float) (time_1 - time_0)) / <%= exec_num %>, DEC);
				Serial.println(" microseconds");
			<%
		});
	%>
	
	<%= microcontroller.digitalWrite(ledPin, 'HIGH') %>
	<%= microcontroller.digitalWrite(ledPin, 'LOW') %>
}


void loop() {
	<%= microcontroller.digitalWrite(raw('LED_PIN'), raw('HIGH')) %>
	delay(100);
	<%= microcontroller.digitalWrite(raw('LED_PIN'), raw('LOW')) %>
	delay(100);
}


	